

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."current_tasks" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "task_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "time_entry_id" bigint NOT NULL
);


ALTER TABLE "public"."current_tasks" OWNER TO "postgres";


COMMENT ON TABLE "public"."current_tasks" IS 'holds which task is currently being tracked by which user';



CREATE TABLE IF NOT EXISTS "public"."tags" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "name" "text",
    "hex_color" "text",
    "dot_text" "text",
    CONSTRAINT "tags_hex_color_check" CHECK (("hex_color" ~ '^#[0-9A-Fa-f]{6}$'::"text"))
);


ALTER TABLE "public"."tags" OWNER TO "postgres";


COMMENT ON COLUMN "public"."tags"."dot_text" IS 'text to display instead of the tag dot';



CREATE TABLE IF NOT EXISTS "public"."time_entries" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "task_id" "uuid",
    "start_time" timestamp with time zone DEFAULT "now"() NOT NULL,
    "end_time" timestamp with time zone,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "notes" "text"
);


ALTER TABLE "public"."time_entries" OWNER TO "postgres";


COMMENT ON COLUMN "public"."time_entries"."notes" IS 'add notes to a time entry';



CREATE OR REPLACE VIEW "public"."task_stats" WITH ("security_invoker"='on') AS
 SELECT "time_entries"."user_id",
    "time_entries"."task_id",
    "sum"(("time_entries"."end_time" - "time_entries"."start_time")) AS "total_time",
    "count"(*) AS "entries_count"
   FROM "public"."time_entries"
  GROUP BY "time_entries"."user_id", "time_entries"."task_id";


ALTER TABLE "public"."task_stats" OWNER TO "postgres";


COMMENT ON VIEW "public"."task_stats" IS 'Summarizes total time spent and count of entries per user per task';



CREATE TABLE IF NOT EXISTS "public"."tasks" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL,
    "alt_code" character varying NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "is_favorite" boolean DEFAULT false
);


ALTER TABLE "public"."tasks" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."tasks_tags" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "task_id" "uuid" NOT NULL,
    "tag_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."tasks_tags" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."tag_stats" WITH ("security_invoker"='on') AS
 SELECT "tasks_tags"."user_id",
    "tasks_tags"."tag_id",
    "count"(*) AS "tasks_count",
    "sum"("task_stats"."total_time") AS "total_time",
    "sum"("task_stats"."entries_count") AS "entries_count"
   FROM ((("public"."tasks_tags"
     JOIN "public"."tags" ON (("tasks_tags"."tag_id" = "tags"."id")))
     JOIN "public"."tasks" ON (("tasks_tags"."task_id" = "tasks"."id")))
     JOIN "public"."task_stats" ON ((("task_stats"."user_id" = "tasks_tags"."user_id") AND ("task_stats"."task_id" = "tasks_tags"."task_id"))))
  GROUP BY "tasks_tags"."user_id", "tasks_tags"."tag_id", "tags"."name";


ALTER TABLE "public"."tag_stats" OWNER TO "postgres";


COMMENT ON VIEW "public"."tag_stats" IS 'Aggregated statistics of tasks by tag';



ALTER TABLE "public"."time_entries" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."time_entries_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."current_tasks"
    ADD CONSTRAINT "current_tasks_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tasks_tags"
    ADD CONSTRAINT "task_tags_pkey" PRIMARY KEY ("task_id", "tag_id");



ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_alt_code_key" UNIQUE ("alt_code");



ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."time_entries"
    ADD CONSTRAINT "time_entries_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."current_tasks"
    ADD CONSTRAINT "current_tasks_task_id_fkey" FOREIGN KEY ("task_id") REFERENCES "public"."tasks"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."current_tasks"
    ADD CONSTRAINT "current_tasks_time_entry_id_fkey" FOREIGN KEY ("time_entry_id") REFERENCES "public"."time_entries"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tasks_tags"
    ADD CONSTRAINT "task_tags_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tags"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tasks_tags"
    ADD CONSTRAINT "task_tags_task_id_fkey" FOREIGN KEY ("task_id") REFERENCES "public"."tasks"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."time_entries"
    ADD CONSTRAINT "time_entries_task_id_fkey" FOREIGN KEY ("task_id") REFERENCES "public"."tasks"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Users can modify their own records" ON "public"."current_tasks" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can modify their own records" ON "public"."tasks" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can modify their own records" ON "public"."tasks_tags" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can modify their own records" ON "public"."time_entries" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can read their own records" ON "public"."current_tasks" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can read their own records" ON "public"."tasks" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can read their own records" ON "public"."tasks_tags" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can read their own records" ON "public"."time_entries" FOR SELECT USING (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."current_tasks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tags" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tasks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tasks_tags" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."time_entries" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "users can modify their own tags" ON "public"."tags" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "users can read their own tags" ON "public"."tags" FOR SELECT USING (("auth"."uid"() = "user_id"));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";






ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."current_tasks";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."current_tasks" TO "anon";
GRANT ALL ON TABLE "public"."current_tasks" TO "authenticated";
GRANT ALL ON TABLE "public"."current_tasks" TO "service_role";



GRANT ALL ON TABLE "public"."tags" TO "anon";
GRANT ALL ON TABLE "public"."tags" TO "authenticated";
GRANT ALL ON TABLE "public"."tags" TO "service_role";



GRANT ALL ON TABLE "public"."time_entries" TO "anon";
GRANT ALL ON TABLE "public"."time_entries" TO "authenticated";
GRANT ALL ON TABLE "public"."time_entries" TO "service_role";



GRANT ALL ON TABLE "public"."task_stats" TO "anon";
GRANT ALL ON TABLE "public"."task_stats" TO "authenticated";
GRANT ALL ON TABLE "public"."task_stats" TO "service_role";



GRANT ALL ON TABLE "public"."tasks" TO "anon";
GRANT ALL ON TABLE "public"."tasks" TO "authenticated";
GRANT ALL ON TABLE "public"."tasks" TO "service_role";



GRANT ALL ON TABLE "public"."tasks_tags" TO "anon";
GRANT ALL ON TABLE "public"."tasks_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."tasks_tags" TO "service_role";



GRANT ALL ON TABLE "public"."tag_stats" TO "anon";
GRANT ALL ON TABLE "public"."tag_stats" TO "authenticated";
GRANT ALL ON TABLE "public"."tag_stats" TO "service_role";



GRANT ALL ON SEQUENCE "public"."time_entries_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."time_entries_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."time_entries_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
